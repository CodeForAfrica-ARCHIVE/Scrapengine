"""
scrapengine/scrapers/article.py tests
"""
import os
import unittest
import requests
from Scrapengine.scrapers import article as article_scraper
from Scrapengine.configs import ARCHIVE
from bs4 import BeautifulSoup

class ArticleScraperTestCase(unittest.TestCase):
    
    def setUp(self,):
        from Scrapengine.configs import SCRAPERS
        self.article_source = SCRAPERS['article']['100r']
        self.article_html = self._get_source_html()

    def _get_source_html(self,):
        return article_scraper.get_source_html(self.article_source)


    def test_get_source(self,):
        self.assertEqual(self.article_html[1], 200)
        self.assertTrue(str(self.article_html[0]).endswith("html>") )


    def test_get_links(self,):
        links = article_scraper.get_links(self.article_html)
        self.assertIsInstance(links, list)

    def test_filter(self,):
        links = article_scraper.get_links(self.article_html)
        clean = article_scraper._filter(links)
        self.assertIsInstance(clean, dict)

    def test_output(self,):
        for _file in os.listdir(ARCHIVE):
            if _file.endswith('csv') and _file.startswith('tests'):
                # delete output files generated by the unit tests
                os.remove("%s/%s" % (ARCHIVE, _file))

        links = article_scraper.get_links(self.article_html)
        clean = article_scraper._filter(links)
        article_scraper.output(clean, source="tests")

        generated = False
        for _file in os.listdir(ARCHIVE):
            if _file.endswith('csv') and _file.startswith('article-tests'):
                generated = True
                os.remove("%s/%s" % (ARCHIVE, _file))
                break
        self.assertTrue(generated, msg="Output not generated")



if __name__ == '__main__':
    unittest.main()
